<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlLNsAAwzWAVZc5BNobucOJi7cfyQs
        24Y5QN8NJCzbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANj7eADI53gQuNt01P0bgLygv
        3DoeJtrlHiba+iIp26InL9wcDBTXAJGV7QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYu2wAvN90NIirbZiEp
        21ghKdsTHyfarx0l2v8dJdr/HSXa/yAn2sElLds1////AC013QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0l2gAmLtsAKzLcJCEp
        25wfJ9ppJy7bBSIq23MdJdr7HSXa/x0l2v8dJdr/HSXa/x8m2t4gJ9tdIyrbBCEp2wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Q98AUljjAiAo
        20wfJ9rEHibacAoT1wIpMNwzHyfa4h0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x4m2vIiKtuCLjXdDx8n
        2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCDZACUt
        3A4fJ9p7Hyba4R4m2nIZIdoDKjLcECAo2rAdJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l
        2vsgKNupJy/cHw0W1wA3Pd8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWV/kABIa
        2AAkLNsoICjbqx0l2vEeJtpwMTndBAAAxwAjK9tyHSXa+x0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l
        2v8dJdr/HSXa/x0l2v8gKNvHJS3bQgAE1AAfJ9oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAERL
        4ABZX+QDJi3bTh4m2tUdJdr0ICjacDI53QQgKNoAJy/cMh8n2uAdJdr/HSXa/x0l2v8dJdr/HSXa/x0l
        2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8eJtrkIirbYDxD3wUuNd0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALjXdDyMr238fJ9rtHiba9R8n2nAmLdsELTTdADM63g4hKduwHSXa/x0l2v8dJdr/HSXa/x0l
        2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8eJtrzIirbiSwz3RQnL9wAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAhKdutHSXa/B0l2vMfJ9pxOD/eBjY93gAAANIAIirbah4m2vodJdr/HSXa/x0l
        2v8dJdr/HSXa/x0l2v8eJtr2ICjbox8m2rweJtrxHSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr9ICjbsSkx
        3CgKE9cAV13kAAAAAAAAAAAAAAAAAB0l2v8eJtr1KTHcejM63gUpMNwAJSzbACsz3DMgKNreHSXa/x0l
        2v8dJdr/HSXa/x0l2v8dJdr/HiXa/iMr25k1PN4KLTTdCygw3D8iKtuPHyfa0h0l2vkdJdr/HSXa/x0l
        2v8dJdr/ICja0iUt20dwdegBQkngAAAAAAAAAAAAHiba9iox3HlVW+MGPEPfACUt3AAoL9wOISjbsB0l
        2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8gKNu1MTjdFyQs2wAAAAAAOD7fAElP4gEqMdwXICjbWSAo
        26cfJ9rjHSXa/h0l2v8dJdr/Hiba5yIp22o3Pt8JMzreAAAAAAAkLNuBRk3hCD1E3wAAAAAAGiLaACgv
        3EIfJ9riHSXa/B0l2v8dJdr/HSXa/x0l2v8dJdr/ICjb0iox3CwfJ9oAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAzOt4ANDveBS013ScjK9tzHyfavB4m2u8dJdr/Hiba+CAo25IhKdsWChPXAFBW4gU/RuAAAAAAAAAA
        AAAgKNoANz7eCSUt2yokK9tfISnboR8n2tIeJtryHSXa/x8n2uUpMNxDAQrVAFlf5AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAaW7nAAAAyAAqMtwLJCzbNyIq24kgKNrRHiba+SEo27wqMdwwLjXdAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACkx3ABGTOECLTTdFScv3DsiKtt+JCvbWIqO7AE8Q98AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJT+EAaG3mAS823RUkK9tQICjbpiEp
        270AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADM7
        3gAvNt0EJi7cJTM63gIuNd0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAxON4AISnbmyMr20QkLNsQf4TrAE9V4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVM4QBpb+cCJi7cWCMr23EkLNszLDPcEEFH4AE5QN8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAIyvbACgw3AQeJtrIHiba9h8n2skkLNt8KTDcLykx3AcZIdkA////AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQVuIADxjYACgv3EkfJ9rpHSXa/x4m2u4fJ9rKISnblycu
        3FQoMNwjOkHfCDQ73gAAAAAAAAAAAB0l2gAjK9sEISnbdCcu3BwiKdufHiba+h0l2v8eJtrpHyfasyEp
        22cnL9wgUVfjAzQ73gAAAAAAAAAAAAAAAAAAAAAA////ABMb2AAjK9svHyfa0h0l2v8dJdr/HSXa/x0l
        2v8dJdr/Hiba+h8n2twlLdtCHCTaAAAAAAAfJ9sAICjbBB0l2m4dJdr1KjLcADI53QwhKdt2Hiba8B0l
        2v8dJdr/HSXa/B8n2twiKtucJSzbTScv3BI5P+ABKTDdAAAAAAAnL9wALjbdGCEp27sdJdr/HSXa/x0l
        2v8dJdr/HSXa/x0l2v8dJdr/ICjaqCIq2w0hKdsALDPdADU83wMfJtptHSXa8h0l2v8AAAAAJCvbACgv
        3AQnLtxUICjb2R0l2v8dJdr/HSXa/x0l2v8eJtr2HibayiEp24QoMNw2PUTfBy413QwhKduXHSXa/h0l
        2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x8n2t8mLtwwIyvbAD5F4ABnbOcCJS3bZR4m2vEdJdr/Hyfa4gAA
        AAAAAAAAb3ToAAAAwQAnL9wzICjbvR0l2v4dJdr/HSXa/x0l2v8dJdr/HSXa/x8n2uwhKduzIyvbox4m
        2vgdJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr4IirbagAAsQBAR+AAoKPxASoy3GIfJ9rtHSXa/yAo
        2sEmLds5AAAAAAAAAAAAAAAA////AB4m2gAoL9wZISnbmB4m2vgdJdr/HSXa/x0l2v8dJdr/HSXa/x0l
        2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x8n2qovNt0KLTTdAMLE9QEmLtxUHiba6B4m
        2vohKduXLDTdGhMb2AAAAAAAAAAAAAAAAAAAAAAAAAAAADI63gAxON0KIyvbbx8n2usdJdr/HSXa/x0l
        2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8eJtrgIyrbMyMr2wAAANEAHibaTh4m
        2ugdJdrnIirbbDc+3go1PN4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5U4gBuc+gCKDDcSx8n
        2tIdJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/Hiba+SIq22kPGNcAAADSAB4m
        2k4dJdrlHyfaySMr20MAANIAHSXaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0l
        2gArMtwAJSzbLSEp27YeJtr8HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/HSXa/x0l2v8hKNuvNTzeDRIb
        2AAoL9xLICja3iAo26UjK9seFR3ZAB0l2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA2Pd4ANDzeEyEp25AdJdr2HSXa/x0l2v8dJdr/HSXa/x0l2v8dJdr/Hyfa4Sgv
        3DYYIdkAMDfdRiIq280kK9t1OUDfCisz3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtNN0ALTXdCCEp22keJtrmHSXa/x0l2v8dJdr/HSXa/x0l
        2vohKNttAADNAC823TwkLNunJSzbTElP4QI8Q98AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAR+AAanDnASQs2z4fJ9rNHSXa/x0l
        2v8dJdr/ISjbsSgw3A0lLdsvKTDcficu3CcsNNwAGiLaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdJdoAMTjdACsy
        3CUhKdurHSXa/R8n2uArM9wzKjHcHSsy3E4oMNwQHSXaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHyfaACoy3BIfJ9qdIirbe1Vb5AkzOt4gNTzeBjU83gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8D///+Af///AB///gAP//gAB//wAAP/4IAA/4EAAH8CAAA/BgAAHwwA
        AAcYAOADOAH8AXgD/4D/A//g/////H////8P/4H+A/+APAB/ADiADgAwwAAAYPAAAMD4AACB/AABg/4A
        Awf/gAIf/8AEP//gCH//8AH///wD///+B/8=
</value>
  </data>
</root>